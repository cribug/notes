<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Cribug's Notes]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://notes.cribug.com/"/>
  <updated>2016-03-29T14:43:32.426Z</updated>
  <id>http://notes.cribug.com/</id>
  
  <author>
    <name><![CDATA[Cribug]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[各路大牛齐聚《技术社群大会》]]></title>
    <link href="http://notes.cribug.com/2016/TCC2016/"/>
    <id>http://notes.cribug.com/2016/TCC2016/</id>
    <published>2016-03-29T09:47:26.000Z</published>
    <updated>2016-03-29T14:43:32.426Z</updated>
    <content type="html"><![CDATA[<p>利用周末的空闲时间，去参加了由极客邦举办的<font color="#0070C2">技术社群大会</font>，见证了一场由IOS大牛唐巧引起的粉丝见面会。啥？你问什么叫粉丝见面会？参会人员一般以上都是冲着唐巧去的，而且纷纷合照留念，这不叫粉丝见面会么？然而我并不是IOS开发者 <strong>:)</strong>。转为正题，这次大会的质量还是非常高滴，虽说是社群大会，但是大多数来的都是技术人员，极少数是运营人员。</p>
<p><img src="/images/TCC2016.png" alt="TCC Logo" title="TCC Logo"></p>
<p>对于开发者来说，这样的大会虽然不能短时间提升你的技术能力，但能让你体会到一场盛大的技术盛宴，对于开拓视野还是不错滴。大会的演讲嘉宾太多，我就讲讲印象最深的两个人吧，一个是IOS明星唐巧小哥，一个是PHP明星鸟哥。</p>
<h3 id="资深iOS开发者——唐巧">资深iOS开发者——唐巧</h3><p>先来一段官方介绍吧！</p>
<blockquote>
<p>唐巧，Blogger，资深iOS开发者，InfoQ编辑，《iOS开发进阶》作者。曾在网易参与过网易邮箱、网易微博以及有道云笔记的开发。</p>
<p>目前在猿题库创业，是小猿搜题的产品技术负责人。喜欢写作与分享，长期维护着自己的技术博客：<a href="http://blog.devtang.com" target="_blank" rel="external">http://blog.devtang.com</a> 和微信公共帐号iOSDevTips，他的技术文章也多次发表在InfoQ网站上。</p>
</blockquote>
<p>话说网易的产品用着都还不错呢，就是安全做的不到位唉，现在应该好了吧，表示是163邮箱的老用户了（不服来拼）。</p>
<p>话说唐巧小哥刚上场就问，现场有多少人是根据他提供的优惠码来参加大会的（要知道即便有优惠码，还是需要100软妹纸的），从我看得到的视野来说，基本2/3的人都举起了手，然后又问有多少人是IOS开发者，结果有更多的人参与了进来。我只想说这是真爱！！！</p>
<p>唐巧小哥带给我们的不是IOS各种高大上的技术，而是一位IOS新人，经历了怎样的成长，才站在了技术之巅的历程。他说，现在的大牛分为两种人，一种是静下心来默默做事情的，非常低调，但是实力强悍；另外一种是通过写博客或者笔记等，来沉淀自己的知识，同时分享了知识，逐渐成为行业的专家。而他属于第二种人。</p>
<ul>
<li>2011.07转型学习IOS开发</li>
<li>2012.05独立负责IOS产品</li>
<li>2013年开了个微信公众号，用了半年时间，达到3000订阅量</li>
<li>2014年完成了一本书——《iOS开发进阶》</li>
</ul>
<p>这就是他的成长历程。</p>
<p>为什么你不行呢？很多人都会这样找借口，上班没时间去学习。真的没时间学习么？</p>
<p>唐巧利用上下班坐公交时间和平时的碎片时间，看WWDC视频，看各种IOS博客，然后沉淀成笔记，反复的复习。记忆→理解→应用→分析→评鉴→创造。也许你又会说英语不好，WWDC视频看不了；如果花太多时间学习了话，就没有对象，没有老婆。你可知道唐巧小哥的孩子都快能打酱油了呢。</p>
<p>下面是他最后的总结：</p>
<ul>
<li>时间（不要找借口）</li>
<li>心智（培养一些习惯，不要去抵抗，设定一个目标，写微信公众号或者写博客）</li>
<li>坚持（10000个小时的实践者，用10000h，你可能就是某一领域的专家，或许三年就能完成，或许五年）</li>
</ul>
<h3 id="PHP技术专家——鸟哥">PHP技术专家——鸟哥</h3><blockquote>
<p>惠新宸，国内最有影响力的PHP技术专家，PHP开发组核心成员，PECL开发者，Zend公司外聘顾问，曾供职于雅虎、百度、新浪，现任链家网技术副总裁兼总架构师。是PHP 7的核心开发者，PHP5.4，5.5的主要开发者。</p>
<p>作为PECL开发者贡献了Yaf (Yet another framework)，Yar(Yet another RPC framework) 以及Yac(Yet another Cache)、Taint等多个优秀开源作品，同时也是APC、Opcache、Msgpack等项目的维护者。</p>
</blockquote>
<p>看到这里你是不是惊呆了呢？没事，我也惊呆了！有人说，鸟哥不是搞Linux的么？没错，但是此鸟哥非彼鸟哥，如果你是做PHP的话，就肯定知道了。</p>
<p>我是大概去年2月份学习的PHP吧，直到半年后，偶然机会才得知江湖有PHP鸟哥这一号人物。我们都是用PHP写东西的，而鸟哥却是写PHP的，这之间的差距，可想而知！</p>
<p>我不知道为什么很多程序员都会去黑PHP，但是PHP工程师的就业前景，就目前而言，还是排在前几名的。说其语法奇葩也好，说其函数命名不规范也好，但它就是走在时代的前沿。鸟哥认为，语言的好坏，是市场需求来决定的，而不是开发者来决定的。在PHP的背后，有着强大的社区支持，PHP开发过程中，如果遇到错误，只要将错误代码贴到Google上，第一个答案就能解决你的问题，这就是PHP背后强大的社区支持。</p>
<ul>
<li><p>PHP 1 (1994)<br>Personal HomePage Tool（首创: HTML和脚本融合在一起，开发维护效率大幅提升）</p>
</li>
<li><p>PHP 2 (1995 ~ 1997)<br>PHP/FI(Form Interpreter)（还只是简单的Form解析，加入了对mSQL的支持，1996: 50000个域名使用PHP）</p>
</li>
<li><p>PHP 3 (1998)<br>Hypertext Preprocessor（终于是一门语言了，弱类型, 可扩展的语言）</p>
</li>
<li><p>PHP 4 (2000)<br>Zend Engine 1.0（基本的OO支持、会话支持、性能提升、社区快速发展、2002：Yahoo! 从YScript迁移到了PHP）</p>
</li>
<li><p>PHP 5 (2004)<br>Zend Engine 2.0（更好的OO支持、PDO的引用、 性能提升、WordPress、Facebook）</p>
</li>
<li><p>PHP 6 (2005)<br>Unicodes支持，然而你懂得。。。</p>
</li>
<li><p>PHP 7 (2014)<br>Zend Engine 3.0（最大的一次重构, 历时一年多开发，PHP最大的性能提升版本）</p>
</li>
</ul>
<p>想要鸟哥最近的的两个演讲PPT，可以可以戳下面的链接：</p>
<p>配置PHP7达到更高性能: <a href="http://www.slideshare.net/laruence/php7-for-its-best-performance" target="_blank" rel="external">http://www.slideshare.net/laruence/php7-for-its-best-performance</a><br>PHP的历史: <a href="http://www.slideshare.net/laruence/a-history-of-php" target="_blank" rel="external">http://www.slideshare.net/laruence/a-history-of-php</a></p>
]]></content>
    <summary type="html">
    <![CDATA[利用周末的空闲时间，去参加了由极客邦举办的<font color="#0070C2">技术社群大会</font>，见证了一场由IOS大牛唐巧引起的粉丝见面会。啥？你问什么叫粉丝见面会？参会人员一般以上都是冲着唐巧去的，而且纷纷合照留念，这不叫粉丝见面会么？然而我并不是IOS开发者 <strong>:)</strong>。转为正题，这次大会的质量还是非常高滴，虽说是社群大会，但是大多数来的都是技术人员，极少数是运营人员。]]>
    
    </summary>
    
      <category term="技术大会" scheme="http://notes.cribug.com/tags/%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[防止Ajax重复递交]]></title>
    <link href="http://notes.cribug.com/2015/prevent-repeat-ajax/"/>
    <id>http://notes.cribug.com/2015/prevent-repeat-ajax/</id>
    <published>2015-12-03T12:14:43.000Z</published>
    <updated>2016-03-30T15:56:29.280Z</updated>
    <content type="html"><![CDATA[<p>遇到了这样一个问题，使用ajax进行表单递交，如果网络不好，不能及时响应，如果重复点击submit按钮，会不断的向服务器递交数据，导致重复递交同样的数据。那么这个问题该怎么解决呢？</p>
<h3 id="最粗暴的方式，修改按钮状态或者外部变量锁定">最粗暴的方式，修改按钮状态或者外部变量锁定</h3><ul>
<li>修改按钮状态 - 只要点击按钮后，将按钮状态更改为disabled，返回结果后就delete掉这个状态。</li>
<li>外部变量锁定 - 放个全局变量，只要发了Ajax请求，变量为false，收到结果就变回true。每次发请求的时候检测这个变量，假如为false就不能发Ajax。</li>
</ul>
<p>当然不推荐这两种方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[遇到了这样一个问题，使用ajax进行表单递交，如果网络不好，不能及时响应，能重复点击submit按钮，会不断的向服务器递交数据，导致重复递交同样的数据。]]>
    
    </summary>
    
      <category term="Ajax" scheme="http://notes.cribug.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Ajax取代传统的Form提交的好处]]></title>
    <link href="http://notes.cribug.com/2015/ajax-vs-form/"/>
    <id>http://notes.cribug.com/2015/ajax-vs-form/</id>
    <published>2015-12-01T15:14:21.000Z</published>
    <updated>2016-01-28T18:07:16.828Z</updated>
    <content type="html"><![CDATA[<p>开发的过程中，总会遇到各种各样的小问题。有的问题是由于个人失误造成的，需要去修正，而有的是因为决策原因，需要换条思路去解决。一般我们在实现页面局部刷新的时候使用Ajax，表单递交的时候使用传统的Form递交。如果表单递交使用Ajax的话，也许会有意想不到的结果。</p>
<p>使用Ajax递交表单，体验会更好。数据提交页面不会闪屏；页面局部更新速度快；网络带宽占用低。</p>
<p>传统模式下，表单提交整个页面重绘，为了维持页面用户对表单的状态改变，要多写不少代码。 要在控制器和模板之间传递更多参数以保持页面状态。而AJAX不然，数据提交页面不会白屏，因为页面只是局部更新， 不关心也不会影响页面其他部分的内容。</p>
]]></content>
    <summary type="html">
    <![CDATA[开发的过程中，总会遇到各种各样的小问题。有的问题是由于个人失误造成的，需要去修正，而有的是因为决策原因，需要换条思路去解决。一般我们在实现页面局部刷新的时候使用Ajax，表单递交的时候使用传统的Form递交。如果表单递交使用Ajax的话，也许会有意想不到的结果。]]>
    
    </summary>
    
      <category term="Ajax" scheme="http://notes.cribug.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[来自UCloud的数据方舟]]></title>
    <link href="http://notes.cribug.com/2015/UCloud-TestDataArk/"/>
    <id>http://notes.cribug.com/2015/UCloud-TestDataArk/</id>
    <published>2015-11-24T03:21:18.000Z</published>
    <updated>2016-01-28T18:07:27.248Z</updated>
    <content type="html"><![CDATA[<p>上周做完UCloud的<font color="red">数据方舟</font>测试，今天写个书面的测评吧。</p>
<h3 id="1-_介绍">1. 介绍</h3><h4 id="1-1_UCloud">1.1 UCloud</h4><p>最早看到UCloud的影子是在一个开源社区，印象最深刻的就是那个简洁的Logo。当时还在学校，对云计算这个概念不是很清楚，使用过一些产品后，才知道云计算的强大之处——<font color="#0070C2">成本低 · 安全 · 方便</font>。</p>
<p><img src="/images/ucloud-logo.png" alt="UCloud Logo" title="UCloud Logo"></p>
<p>随着云计算的发展，各大互联网巨头都提供有云服务，而UCloud是一家非常专业的云计算服务商，说其专业，是因为UCloud只专注于云计算，比如典型的云服务器、云数据库等。</p>
<h4 id="1-2_UDataArk（数据方舟）">1.2 UDataArk（数据方舟）</h4><p>还记得电影《诺亚方舟：创世之旅》和《2012》里面的诺亚方舟么？其作用是保留物种不被灭绝。在计算机领域，数据就等同于物种，是非常重要的。<font color="red">数据方舟</font>是UCloud近期提供的数据备份服务，目前还处于内测阶段，我有幸提前进行了试用。</p>
<p>数据方舟支持手工备份和<font color="red">秒级备份</font>服务。从使用感受上来说，秒级备份是亮点。各大互联网厂商都提供的云服务一般都支持手动备份（创建镜像），但是大多忽略了实时备份，然而只有实时备份才更能保证数据的完整性，秒级备份服务正是基于这点诞生的。</p>
<h3 id="2-_使用">2. 使用</h3><h4 id="2-1_开启数据方舟">2.1 开启数据方舟</h4><p>在Ucloud上创建云主机，目前只有标准版的云主机支持数据方舟服务，SSD高性能版、网络增强机型暂时不支持数据方舟服务，相信Ucloud很快会全方位支持。</p>
<p>在最后一步备份方案中后面打勾，才能开启这台主机的数据方舟服务。<br><img src="/images/ucloud-ark-open.png" alt="开启数据方舟" title="开启数据方舟"></p>
<h4 id="2-2_我的云主机配置">2.2 我的云主机配置</h4><ul>
<li>主机名：ARK</li>
<li>机型：标准版</li>
<li>镜像：CentOS 6.5 64bit</li>
<li>CPU：2核</li>
<li>内存：4G</li>
<li>本地硬盘：<br>/dev/vda1 20GB系统盘(/)<br>/dev/vdb 20GB数据盘(/data/)</li>
</ul>
<p>既然数据方舟是用来备份数据的，所以刚开始我在云主机上做了一个WEB服务配置，使用了LNMP架构（Linux + Nginx + MySQL + PHP），将MySQL的data目录放在数据盘中(/data/mysql/)，同时安装了一个流行的php框架Laravel，也放在数据盘中(/data/www/)。</p>
<p><img src="/images/ucloud-ark-base.png" alt="基础配置" title="基础配置"></p>
<p>下面是部署在该云主机上的WEB程序，为了使测试更直观，为该Web程序配置了二级域名。<br><img src="/images/ucloud-web-1.png" alt="web首页" title="web首页"></p>
<p>OK！既然系统环境和程序部署完成，就可以开始测试数据方舟的功能了。</p>
<h4 id="2-3_手动备份测试">2.3 手动备份测试</h4><p>手动备份数量上限：系统盘和数据盘各三份，如果多于三个的话，需要先把以前的一份备份删除，才能继续创建备份。</p>
<p>我的个人认知是这样的，这里的手动备份相当于各大云厂商提供的镜像服务，手动备份的最大特点是灵活性高，适用于各种备份场景，在应用进行重大迭代之前进行手动备份是非常有必要的。</p>
<p><img src="/images/ucloud-handbak-1.png" alt="手动备份" title="手动备份"></p>
<p>等待了大概5秒钟系统盘和数据盘备份成功。</p>
<p><img src="/images/ucloud-handbak-2.png" alt="手动备份" title="手动备份"></p>
<p>接下来我们可以先把Web应用的数据库删除了，看看效果。</p>
<blockquote>
<p>mysql&gt; show databases;<br>+——————–+<br>| Database           |<br>+——————–+<br>| information_schema |<br>| laraveltest        |<br>| mysql              |<br>| performance_schema |<br>+——————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql&gt; drop database laraveltest;<br>Query OK, 6 rows affected (0.01 sec)</p>
</blockquote>
<p>现在来访问web主页，由于我使用Debug模式，页面会显示出这样的提示，意思是找不到数据库laraveltest。</p>
<blockquote>
<p>PDOException in Connector.php line 47:<br>SQLSTATE[HY000] [1049] Unknown database ‘laraveltest’</p>
</blockquote>
<p>好吧，接下来对数据盘进行恢复，来尝试一下找回我刚才弄丢的数据。<font color="red">需要有一点注意的是，可以在开机状态下备份，但是不能在开机状态下还原数据，需要将主机关闭后进行恢复，以保证数据的准确性</font>。</p>
<p><img src="/images/ucloud-handbak-3.png" alt="手动备份" title="手动备份"></p>
<p>关闭主机，选择按备份恢复，对我们刚才的备份的数据盘进行恢复。<br><img src="/images/ucloud-handbak-4.png" alt="手动备份" title="手动备份"></p>
<p>数据盘恢复比较快，1分钟左右就会好了，然后启动服务器。查看Web主页，显示正常。查看数据库，刚才被删除的laraveltest数据库已经恢复正常。</p>
<blockquote>
<p>mysql&gt; show databases;<br>+——————–+<br>| Database           |<br>+——————–+<br>| information_schema |<br>| <font color="red">laraveltest</font>        |<br>| mysql              |<br>| performance_schema |<br>+——————–+<br>4 rows in set (0.00 sec)</p>
</blockquote>
<h4 id="2-4_秒级备份测试">2.4 秒级备份测试</h4><p>我认为秒级恢复是数据方舟最赞的部分，一是因为其开发技术要求肯定要高，二是可以给使用人员带来不少的便捷。秒级服务提供的具体内容如下：</p>
<ul>
<li>12小时内的任意时间，精确到秒哦</li>
<li>24小时内的任意整点</li>
<li>3天内的0点时刻</li>
</ul>
<p>由于我上周就进行了使用，所以这里积攒了些秒级备份的数据。</p>
<p><img src="/images/ucloud-autobak-1.png" alt="秒级备份" title="秒级备份"><br><img src="/images/ucloud-autobak-2.png" alt="秒级备份" title="秒级备份"></p>
<h5 id="2-4-1_秒级备份测试一">2.4.1 秒级备份测试一</h5><p>接下来把系统盘和数据盘都恢复到三天前，看看当时的Web界面是什么样子的。</p>
<p>关闭主机——&gt;恢复——&gt;按备份恢复<br><img src="/images/ucloud-autobak-3.png" alt="秒级备份" title="秒级备份"></p>
<p>经过4分钟，系统盘和数据盘全部还原成功，开机，来一睹三天前的Web界面吧（Laravel的初始化界面）。<br><img src="/images/ucloud-autobak-4.png" alt="秒级备份" title="秒级备份"></p>
<h5 id="2-4-2_秒级备份测试二">2.4.2 秒级备份测试二</h5><p>这个时候，如果我使用rm把 整个磁盘删除了，还不能不能恢复成功呢？再次选择使用秒级备份，把数据恢复到今天中午时刻，观测一下是否能够成功。</p>
<blockquote>
<p>[root@10-10-31-119 ~]# rm -rf / --no-preserve-root</p>
</blockquote>
<p>尽管有Ucloud的数据方舟，但当我rm整个磁盘的时候，脑袋还是嗡的一下，有点晕，原谅我的承受力有点低吧（主要以前丢数据丢的有点怕了）。现在将服务器断电（由于删除了整个系统，无法正常关机），使用秒级备份，把数据恢复到今天中午13:03:34（随机敲的）</p>
<p><img src="/images/ucloud-autobak-5.png" alt="秒级备份" title="秒级备份"></p>
<p>… … … 这次恢复花的时间稍微长点，用了15分钟。迫不及待的打开Web，观测一下，谢天谢地，一切正常。</p>
<p><img src="/images/ucloud-autobak-6.png" alt="秒级备份" title="秒级备份"></p>
<h3 id="3-_总结">3. 总结</h3><p>对数据方舟的测试，断断续续用了一周的时间，在这个过程中，与数据方舟的研发人员进行过沟通，对数据方舟这款产品有了一定的理解，并且就一些细节问题进行反馈，发现数据方舟的研发团队的执行力相当高，很多问题都会当天解决，向数据方舟的研发团队致敬。下面是我对数据方舟这款产品的总结。</p>
<ul>
<li><p><font color="#0070C2">灵活的手动备份 + 秒级的自动备份</font><br>手动备份适用于各种场景，灵活方便。但是在一些时候手贱地误删了一些东西，而上次手动备份到刚才之间的时间段，增加存在一些很重要的数据，如果使用手动备份，会将这段时间的数据丢掉，我们可以使用秒级备份恢复到误操作的前几秒，既避免了数据的丢失，还解决的手贱造成的问题，相当吃了一次后悔药。</p>
</li>
<li><p><font color="#0070C2">在线实时备份，不需要暂停业务</font><br>刚才使用了手动备份和秒级备份进行恢复系统数据，在备份过程中，没有需要对机器进行任何暂停应用的操作，也没有造成应用的任何不适，这样的方式大大的简化了业务备份的难题，进一步可以降低互联网创业人员的难度。</p>
</li>
<li><p><font color="#0070C2">控制台操作</font><br>一旦服务器应用出问题，即便不是专业的运维人员，也能通过控制台将应用恢复到最近没有出错的时刻（得益于超赞的自动备份）。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[上周做完UCloud的<font color="red">数据方舟</font>测试，今天写个书面的测评吧。最早看到UCloud的影子是在一个开源社区，印象最深刻的就是那个简洁的Logo。当时还在学校，对云计算这个概念不是很清楚，使用过一些产品后，才知道云计算的强大之处——<font color="#0070C2">成本低 · 安全 · 方便</font>。]]>
    
    </summary>
    
      <category term="云计算" scheme="http://notes.cribug.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于微信内置浏览器无法清除缓存问题]]></title>
    <link href="http://notes.cribug.com/2015/wechat-cache/"/>
    <id>http://notes.cribug.com/2015/wechat-cache/</id>
    <published>2015-11-20T01:26:18.000Z</published>
    <updated>2016-01-28T18:07:32.791Z</updated>
    <content type="html"><![CDATA[<p>前段时间开发微信公众号过程中遇到一个很奇怪的问题，网上查了查，遇到这个蛋疼问题的不止我一个，原来是Android的微信客户端内置浏览器会缓存CSS、图片等，而且无法清理缓存，这样如果要修改样式的话，很难实时看到效果，这样给开发者设置了不小的障碍。</p>
<p>有人是这样处理的，到手机的设置里，找到应用程序微信，然后清理数据。清理数据，聊天数据也没有了，难道作为开发者就要这么苦逼吗？</p>
<p>我认为最好的办法是这样的，在.css文件路径后面加上一个随机数。真是豁然开朗啊！</p>
<p>PHP代码</p>
<pre><code><span class="variable">$rand</span> = rand(<span class="number">0</span>,<span class="number">9999</span>);
</code></pre><p>html代码</p>
<pre><code><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"style.css?rand=<span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$rand</span>; <span class="preprocessor">?&gt;</span></span>"</span>/&gt;</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[前段时间开发微信公众号过程中遇到一个很奇怪的问题，网上查了查，遇到这个蛋疼问题的不止我一个，原来是Android的微信客户端内置浏览器会缓存css、图片等，而且无法清理缓存，这样如果要修改样式的话，很难实时看到效果，这样给开发者设置了不小的障碍。]]>
    
    </summary>
    
      <category term="WeChat" scheme="http://notes.cribug.com/tags/WeChat/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL备份与恢复]]></title>
    <link href="http://notes.cribug.com/2015/mysql-backup/"/>
    <id>http://notes.cribug.com/2015/mysql-backup/</id>
    <published>2015-11-18T10:18:18.000Z</published>
    <updated>2016-01-28T18:07:14.851Z</updated>
    <content type="html"><![CDATA[<p>作为一个小码农，刚开始数据库都是通过运行SQL语句来进行备份和还原的，数据多了，发现这个方法的效率很低，成功率也没有保障。今天做一个笔记（通过MySQL命令进行备份和还原），适用于Linux和Windows。</p>
<h3 id="数据库备份">数据库备份</h3><ul>
<li>进入MySQL的库目录（bin目录）。例如在Linux下，<code>cd /usr/local/mysql/bin</code>。</li>
<li>利用MySQL命令导出数据库。<code>mysqldump -uroot -p test &gt; test.sql</code>（导出数据库test到test.sql文件）。<br>提示输入密码时，输入MySQL的用户名的密码。<br>Tip:如果导出单张表的话在数据库名后面键入表名即可。</li>
<li>备份成功。会看到文件test.sql自动生成到bin目录下。</li>
</ul>
<h3 id="数据库还原">数据库还原</h3><h5 id="方法一">方法一</h5><ul>
<li>将备份得到的.sql文件放到MySQL的库目录下。</li>
<li>进入MySQL控制台。<code>mysql -uroot -p</code></li>
<li>选择数据库。<br>自己新建一个数据库itest，<code>create database itest;</code><br>然后<code>use itest;</code> （或者直接选择已有的数据库）</li>
<li>导入数据。<code>source test.sql;</code>。</li>
</ul>
<h5 id="方法二">方法二</h5><ul>
<li>将备份得到的.sql文件放到MySQL的库目录下。</li>
<li>然后打开命令行，直接导入数据。<code>mysql -uroot -p itest &lt; test.sql</code>（导入test.sql文件到数据库itest，前提是MySQL中要有itest这个数据库）。</li>
<li>还原成功，可以到数据库中验证。</li>
</ul>
<p>Tip:如果可以直接运行mysql命令，可以不必进入MySQL库目录。</p>
]]></content>
    <summary type="html">
    <![CDATA[作为一个小码农，刚开始数据库都是通过运行SQL语句来进行备份和还原的，数据多了，发现这个方法的效率很低，成功率也没有保障。今天做一个笔记（通过MySQL命令进行备份和还原），适用于Linux和Windows。]]>
    
    </summary>
    
      <category term="MySQL" scheme="http://notes.cribug.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Fiddler和Wireshark进行手机抓包]]></title>
    <link href="http://notes.cribug.com/2015/mobile-caught/"/>
    <id>http://notes.cribug.com/2015/mobile-caught/</id>
    <published>2015-11-11T03:11:11.000Z</published>
    <updated>2016-01-28T18:07:10.048Z</updated>
    <content type="html"><![CDATA[<p>在App、移动端Web、微信公众号等开发过程中，总会出现这样或者那样的问题，很多数据不好获取，可以通过电脑抓包手机数据的方式来获取数据，从而排除错误。</p>
<h3 id="使用Fiddler抓取Http（Fiddler只能抓取Http）">使用Fiddler抓取Http（Fiddler只能抓取Http）</h3><p>Fiddler可以拦截发出或者收到的Http，可以修改Http的Request和Response数据，因此用这种方法可以模拟一些特殊场景（如包无响应、模拟一些很难出现的错误码等）。:</p>
<ul>
<li>电脑和手机连接到同一个Wifi（同一局域网下）。</li>
<li>电脑端：设置Fiddler，Tools—&gt;Fiddler Option，在connections选项卡下设置监听的端口号（默认8888），然后勾选“Allow remote computers connect”，点击“ok”。</li>
<li>手机端：将该Wifi的代（dai）理（li）选项设置为手动，主机名填写电脑的IP，端口号填写电脑端刚刚设置端口号（默认8888），保存。</li>
<li>设置完毕，电脑端重启Fiddler，操作手机，即可在电脑端的Fiddler上看到http码流。</li>
</ul>
<h3 id="使用Wireshark抓包（需要电脑携带无线网卡）">使用Wireshark抓包（需要电脑携带无线网卡）</h3><p>该方法手机无须root，并且适用于各种有wifi功能的手机（IOS、Android等）、平板等。只要电脑的无线网卡具有无线承载功能，就可以。</p>
<ul>
<li>把电脑的网络做为热点分享出去。</li>
<li>手机连接电脑热点。</li>
<li>启动Wireshark，选择做为热点的网卡，点击start开始抓包。</li>
<li>操作手机，可以抓取到手机所有与网络交互的数据包，如需停止，直接点击wireshark的stop即可。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在App、移动端Web、微信公众号等开发过程中，总会出现这样或者那样的问题，很多数据不好获取，可以通过电脑抓包手机数据的方式来获取数据，从而排除错误。]]>
    
    </summary>
    
      <category term="抓包" scheme="http://notes.cribug.com/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
</feed>
